.grid {
    display: grid !important;
}

.col-g {grid-column-gap:1rem}
.row-g {grid-row-gap:1rem}

@for $i from 1 through 8{
    .cols-#{$i}  {grid-template-columns: repeat($i, 1fr); }
}

@for $i from 1 through 8 {
    @for $y from 1 through 8 {
        .span-#{$i}-#{$y}  { grid-column: $i / span $y }
    }
}

@media screen and (max-width: $medium) {

    @for $i from 1 through 8 {
        @for $y from 1 through 8 {
            .s-span-#{$i}-#{$y}  { grid-column: $i / span $y }
        }
    }
    
    @for $i from 1 through 8{
        .s-cols-#{$i}  {grid-template-columns: repeat($i, 1fr); }
    }

}

.as-end {align-self: end;}
.as-center {align-self: center;}

/* .debug can be added to a g-grid to visualize its effective cells */
.debug > * {
    --color: rgba(248,110,91 ,0.3);
    background-image:
      linear-gradient(to bottom, var(--color) 0%, var(--color) 100%);
  }
  .debug > :nth-child(6n+2) { --color: rgba(103,126,208,0.3) }
  .debug > :nth-child(6n+3) { --color: rgba(224,174,72 ,0.3) }
  .debug > :nth-child(6n+4) { --color: rgba(77, 214,115,0.3) }
  .debug > :nth-child(6n+5) { --color: rgba(217,103,219,0.3) }
  .debug > :nth-child(6n+6) { --color: rgba(94, 204,211,0.3) }
  .debug > :nth-child(6n+7) { --color: rgba(248,110,91 ,0.3) }